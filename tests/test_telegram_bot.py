#!/usr/bin/env python3
"""
Script de Prueba para ELiaS Telegram Bot
=======================================

Prueba las funcionalidades principales sin ejecutar el bot completo.
"""

import sys
import os
from pathlib import Path

# Agregar directorio ra√≠z al path (ahora desde tests/)
ROOT_DIR = Path(__file__).parent.parent  # Subir un nivel m√°s
sys.path.insert(0, str(ROOT_DIR))

def test_configuration():
    """Probar configuraci√≥n"""
    print("üîß Probando configuraci√≥n...")
    
    try:
        from config import settings
        
        print(f"‚úÖ NOTION_TOKEN: {'Configurado' if settings.NOTION_TOKEN else 'NO configurado'}")
        print(f"‚úÖ GOOGLE_API_KEY: {'Configurado' if settings.GOOGLE_API_KEY else 'NO configurado'}")
        print(f"‚úÖ TELEGRAM_BOT_TOKEN: {'Configurado' if settings.TELEGRAM_BOT_TOKEN else 'NO configurado'}")
        
        if settings.TELEGRAM_BOT_TOKEN:
            print(f"   Token: ...{settings.TELEGRAM_BOT_TOKEN[-8:]}")
        
        return all([settings.NOTION_TOKEN, settings.GOOGLE_API_KEY, settings.TELEGRAM_BOT_TOKEN])
        
    except Exception as e:
        print(f"‚ùå Error cargando configuraci√≥n: {e}")
        return False

def test_dependencies():
    """Probar dependencias"""
    print("\nüì¶ Probando dependencias...")
    
    # Test python-telegram-bot
    try:
        import telegram
        print(f"‚úÖ python-telegram-bot v{telegram.__version__}")
        telegram_ok = True
    except ImportError:
        print("‚ùå python-telegram-bot NO instalado")
        telegram_ok = False
    
    # Test otros m√≥dulos cr√≠ticos
    modules_to_test = [
        ('notion_client', 'Notion API'),
        ('google.generativeai', 'Gemini AI'),
        ('asyncio', 'Asyncio')
    ]
    
    results = [telegram_ok]
    
    for module_name, display_name in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {display_name}")
            results.append(True)
        except ImportError:
            print(f"‚ùå {display_name} NO disponible")
            results.append(False)
    
    return all(results)

def test_elias_modules():
    """Probar m√≥dulos de ELiaS"""
    print("\nüß† Probando m√≥dulos de ELiaS...")
    
    modules = [
        ('notion', 'M√≥dulo Notion'),
        ('ia', 'M√≥dulo IA'),
        ('telegram_bot', 'M√≥dulo Telegram Bot')
    ]
    
    results = []
    
    for module_name, display_name in modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {display_name}")
            results.append(True)
        except ImportError as e:
            print(f"‚ùå {display_name}: {e}")
            results.append(False)
    
    return all(results)

def test_services():
    """Probar servicios"""
    print("\nüîß Probando servicios...")
    
    try:
        from notion import tareas_service, proyectos_service
        from ia.services import gemini_service
        
        # Test servicios Notion
        if tareas_service:
            print("‚úÖ TareasService inicializado")
            # Probar obtener tareas
            try:
                tareas = tareas_service.obtener_todas_las_tareas()
                print(f"   üìã Tareas encontradas: {len(tareas)}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error obteniendo tareas: {e}")
        else:
            print("‚ùå TareasService NO inicializado")
        
        if proyectos_service:
            print("‚úÖ ProyectosService inicializado")
            try:
                proyectos = proyectos_service.cargar_proyectos_como_diccionario()
                print(f"   üìÅ Proyectos encontrados: {len(proyectos)}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error obteniendo proyectos: {e}")
        else:
            print("‚ùå ProyectosService NO inicializado")
        
        # Test Gemini
        if gemini_service:
            print("‚úÖ GeminiService inicializado")
        else:
            print("‚ùå GeminiService NO inicializado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando servicios: {e}")
        return False

def test_telegram_bot_creation():
    """Probar creaci√≥n del bot de Telegram"""
    print("\nü§ñ Probando creaci√≥n del bot...")
    
    try:
        from telegram_bot import EliasBot
        
        print("‚úÖ Clase EliasBot importada")
        
        # Intentar crear instancia
        bot = EliasBot()
        print("‚úÖ Instancia EliasBot creada")
        
        # Verificar configuraci√≥n
        if bot.admin_ids:
            print(f"‚úÖ Admin IDs configurados: {bot.admin_ids}")
        
        if bot.token:
            print("‚úÖ Token configurado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando bot: {e}")
        return False

def test_telegram_handlers():
    """Probar handlers del bot"""
    print("\nüéØ Probando handlers...")
    
    try:
        from telegram_bot.handlers import CommandHandlers, MessageHandlers
        from telegram_bot.keyboards import TelegramKeyboards
        
        print("‚úÖ CommandHandlers importado")
        print("‚úÖ MessageHandlers importado") 
        print("‚úÖ TelegramKeyboards importado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error importando handlers: {e}")
        return False

def run_all_tests():
    """Ejecutar todos los tests"""
    print("=" * 60)
    print("üß™ ELiaS Telegram Bot - Suite de Tests")
    print("=" * 60)
    
    tests = [
        ("Configuraci√≥n", test_configuration),
        ("Dependencias", test_dependencies),
        ("M√≥dulos ELiaS", test_elias_modules),
        ("Servicios", test_services),
        ("Creaci√≥n Bot", test_telegram_bot_creation),
        ("Handlers", test_telegram_handlers)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"üí• Error en {test_name}: {e}")
            results.append(False)
    
    # Resumen final
    print("\n" + "="*60)
    print("üìä RESUMEN DE TESTS")
    print("="*60)
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ PAS√ì" if results[i] else "‚ùå FALL√ì"
        print(f"{test_name:<20} {status}")
    
    exitosos = sum(results)
    total = len(results)
    
    print(f"\nüéØ Total: {exitosos}/{total} tests exitosos")
    
    if exitosos == total:
        print("üéâ ¬°Todos los tests pasaron! El bot est√° listo.")
        return True
    else:
        print("‚ö†Ô∏è Algunos tests fallaron. Revisa la configuraci√≥n.")
        return False

if __name__ == "__main__":
    try:
        success = run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã Tests interrumpidos por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error fatal ejecutando tests: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)